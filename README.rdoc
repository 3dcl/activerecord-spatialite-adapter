== SpatiaLite \ActiveRecord Adapter

The SpatiaLite \ActiveRecord Adapter is an \ActiveRecord connection
adapter based on the standard sqlite3 adapter. It extends the standard
adapter to provide support for spatial extensions using SpatiaLite, using
the {RGeo}[http://github.com/dazuma/rgeo] library to represent spatial
data in Ruby. Like the standard sqlite3 adapter, this adapter requires
the sqlite3-ruby gem.

=== What This Adapter Provides

First, this adapter extends the migration syntax to support creating 
spatial columns and indexes. To create a spatial column, use the
<tt>:geometry</tt> type, or any of the OGC spatial types such as
<tt>:point</tt> or <tt>:line_string</tt>. To create a spatial index, set
the <tt>:spatial</tt> option to true.

Examples:

 create_table :spatial_table do |t|
   t.column :latlon, :point  # or t.point :latlon
   t.line_string :path
   t.geometry :shape
 end
 change_table :spatial_table do |t|
   t.index :latlon, :spatial => true
 end

When this adapter is in use, spatial attributes in your \ActiveRecord
objects will have RGeo geometry values. You can set spatial attributes
either to RGeo geometry objects, or to strings in WKT (well-known text)
format, which the adapter will automatically convert to geometry objects.

To specify the RGeo geometry factory, you can either set an explicit
factory for a column, or provide a factory generator that will yield the
appropriate factory for the table's spatial columns based on the value.
For the former, call the set_rgeo_factory_for_column class method on your
\ActiveRecord class. For the latter, set the rgeo_factory_generator class
attribute. This generator should understand at least the <tt>:srid</tt>
option, which will be provided based on the column's specified SRID. Note
that the spatialite adapter does not currently support Z or M coordinates,
as it's unclear to me whether SpatiaLite itself supports them. The
set_rgeo_factory_for_column and rgeo_factory_generator methods are
actually implemented and documented in the "rgeo-activerecord" gem.

Examples, given the spatial table defined above:

 class SpatialTable < ActiveRecord::Base
   
   # By default, use the GEOS implementation for spatial columns.
   self.rgeo_factory_generator = RGeo::Geos.method(:factory)
   
   # But use a geographic implementation for the :latlon column.
   set_rgeo_factory_for_column(:latlon, RGeo::Geographic.spherical_factory)
   
 end

Now you can interact with the data using the RGeo types:

 rec = SpatialTable.new
 rec.latlon = 'POINT(-122 47)'   # You can set by feature object or WKT.
 loc = rec.latlon                # Accessing always returns a feature object, in
                                 # this case, a geographic that understands latitude.
 loc.latitude                    # => 47
 rec.shape = loc                 # the factory for the :shape column is GEOS, so the
                                 # value will be cast from geographic to GEOS.
 RGeo::Geos.is_geos?(rec.shape)  # => true

You can create simple queries based on spatial equality in the same way
you would on a scalar column:

 rec = SpatialTable.where(:latlon => RGeo::Geos.factory.point(-122, 47)).first

You can also use WKT:

 rec = SpatialTable.where(:latlon => 'POINT(-122 47)').first

Other types of queries currently must be written in SQL. However, we are
investigating writing a set of Arel extensions for constructing arbitrary
spatial queries.

=== Installing The Adapter Gem

This adapter has the following requirements:

* Ruby 1.8.7 or later. Ruby 1.9.2 or later preferred.
* SpatiaLite 2.3 or later (2.4 recommended).
* \ActiveRecord 3.0.3 or later. Earlier versions will not work.
* rgeo gem 0.2.4 or later.
* rgeo-activerecord gem 0.2.2 or later.
* sqlite3 gem 1.3 or later.

Install this adapter as a gem:

 gem install activerecord-spatialite-adapter

See the README for the "rgeo" gem, a required dependency, for further
installation information.

=== Setting Up The Adapter

To use this adapter, add this gem, "activerecord-spatialite-adapter",
to your Gemfile, and then request the adapter name "spatialite" in
your database connection configuration (which, for a Rails application,
is in the config/database.yml file). The other database connection
configuration parameters are the same as for the stock sqlite3 adapter,
with the exception of one additional parameter, <tt>libspatialite</tt>,
which should be set to the full path to the libspatialite shared library,
if it is not installed in a standard place (such as /usr/local or
/opt/local).

Furthermore, the SpatiaLite adapter includes a special railtie that
provides support for SpatiaLite databases in ActiveRecord's rake tasks.
This railtie is required in order to run, e.g., rake test. To install 
this railtie, you should add this line to your config/application.rb:

 require 'rgeo/active_record/spatialite_adapter/railtie'

Note that this railtie must load after the ActiveRecord railtie. That is,
the above require command should appear after <tt>require 'rails/all'</tt>.

=== Known bugs and limitations

The spatialite adapter works in principle, but there are a few known holes
in the functionality. Notably, things that require the alter_table
mechanism may not function properly, because the current sqlite3
implementation doesn't properly preserve triggers. This means, among
other things, removing columns in tables with spatial information can
cause the remaining spatial columns to fail. However, most simple things
work, including creating tables with geometric columns, adding geometric
columns to existing tables, and creating and removing spatial R*tree
indexes. Note that this adapter is not yet well tested.

=== Development and support

Documentation is available at http://virtuoso.rubyforge.org/activerecord-spatialite-adapter/README_rdoc.html

Source code is hosted on Github at http://github.com/dazuma/activerecord-spatialite-adapter

Contributions are welcome. Fork the project on Github.

Report bugs on Github issues at http://github.org/dazuma/activerecord-spatialite-adapter/issues

Contact the author at dazuma at gmail dot com.

=== Acknowledgments

RGeo is written by Daniel Azuma (http://www.daniel-azuma.com).

Development of RGeo is sponsored by GeoPage, Inc. (http://www.geopage.com).

=== License

Copyright 2010 Daniel Azuma

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
* Neither the name of the copyright holder, nor the names of any other
  contributors to this software, may be used to endorse or promote products
  derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
